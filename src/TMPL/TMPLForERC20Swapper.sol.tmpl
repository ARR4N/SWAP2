// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.25;
/**
 * GENERATED CODE - DO NOT EDIT
 */

import {TMPLSwap as Swap} from "./TMPLSwap.sol";
import {TMPLSwapperBase} from "./TMPLSwapperBase.gen.sol";

import {ERC20Consideration} from "../ERC20Consideration.sol";

contract TMPLSwapper is TMPLSwapperBase, ERC20Consideration {
    constructor(Swap memory swap) TMPLSwapperBase(swap) {}

    function _disburseFunds(Swap memory swap, address payable feeRecipient, uint256 fee) internal override {
        ERC20Consideration._disburseFunds(swap.parties, swap.consideration, swap.currency, feeRecipient, fee);
    }

    function _postExecutionInvariantsMet(Swap memory) internal pure override returns (bool) {
        // Will be removed by the compiler, but explicitly stating that there are no checks.
        return true;
    }
}
