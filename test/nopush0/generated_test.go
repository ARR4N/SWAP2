// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package nopush0

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// Consideration is an auto generated low-level Go binding around an user-defined struct.
type Consideration struct {
	ThirdParty     []Disbursement
	MaxPlatformFee *big.Int
	Total          *big.Int
}

// Disbursement is an auto generated low-level Go binding around an user-defined struct.
type Disbursement struct {
	To     common.Address
	Amount *big.Int
}

// ERC20Consideration is an auto generated low-level Go binding around an user-defined struct.
type ERC20Consideration struct {
	ThirdParty     []Disbursement
	MaxPlatformFee *big.Int
	Total          *big.Int
	Currency       common.Address
}

// ERC721ForERC20Swap is an auto generated low-level Go binding around an user-defined struct.
type ERC721ForERC20Swap struct {
	Parties       Parties
	Offer         ERC721TransferLibERC721Token
	Consideration ERC20Consideration
}

// ERC721ForNativeSwap is an auto generated low-level Go binding around an user-defined struct.
type ERC721ForNativeSwap struct {
	Parties       PayableParties
	Offer         ERC721TransferLibERC721Token
	Consideration Consideration
}

// ERC721TransferLibERC721Token is an auto generated low-level Go binding around an user-defined struct.
type ERC721TransferLibERC721Token struct {
	Addr common.Address
	Id   *big.Int
}

// ERC721TransferLibMultiERC721Token is an auto generated low-level Go binding around an user-defined struct.
type ERC721TransferLibMultiERC721Token struct {
	Addr common.Address
	Ids  []*big.Int
}

// MultiERC721ForERC20Swap is an auto generated low-level Go binding around an user-defined struct.
type MultiERC721ForERC20Swap struct {
	Parties       Parties
	Offer         []ERC721TransferLibMultiERC721Token
	Consideration ERC20Consideration
}

// MultiERC721ForNativeSwap is an auto generated low-level Go binding around an user-defined struct.
type MultiERC721ForNativeSwap struct {
	Parties       PayableParties
	Offer         []ERC721TransferLibMultiERC721Token
	Consideration Consideration
}

// Parties is an auto generated low-level Go binding around an user-defined struct.
type Parties struct {
	Seller common.Address
	Buyer  common.Address
}

// PayableParties is an auto generated low-level Go binding around an user-defined struct.
type PayableParties struct {
	Seller common.Address
	Buyer  common.Address
}

// Nopush0MetaData contains all meta data concerning the Nopush0 contract.
var Nopush0MetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"deployer_\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"deployer\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"propose\",\"inputs\":[{\"name\":\"swap\",\"type\":\"tuple\",\"internalType\":\"structMultiERC721ForNativeSwap\",\"components\":[{\"name\":\"parties\",\"type\":\"tuple\",\"internalType\":\"structPayableParties\",\"components\":[{\"name\":\"seller\",\"type\":\"address\",\"internalType\":\"addresspayable\"},{\"name\":\"buyer\",\"type\":\"address\",\"internalType\":\"addresspayable\"}]},{\"name\":\"offer\",\"type\":\"tuple[]\",\"internalType\":\"structERC721TransferLib.MultiERC721Token[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"contractIERC721\"},{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}]},{\"name\":\"consideration\",\"type\":\"tuple\",\"internalType\":\"structConsideration\",\"components\":[{\"name\":\"thirdParty\",\"type\":\"tuple[]\",\"internalType\":\"structDisbursement[]\",\"components\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"maxPlatformFee\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"propose\",\"inputs\":[{\"name\":\"swap\",\"type\":\"tuple\",\"internalType\":\"structMultiERC721ForERC20Swap\",\"components\":[{\"name\":\"parties\",\"type\":\"tuple\",\"internalType\":\"structParties\",\"components\":[{\"name\":\"seller\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"name\":\"offer\",\"type\":\"tuple[]\",\"internalType\":\"structERC721TransferLib.MultiERC721Token[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"contractIERC721\"},{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}]},{\"name\":\"consideration\",\"type\":\"tuple\",\"internalType\":\"structERC20Consideration\",\"components\":[{\"name\":\"thirdParty\",\"type\":\"tuple[]\",\"internalType\":\"structDisbursement[]\",\"components\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"maxPlatformFee\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"currency\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}]}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"propose\",\"inputs\":[{\"name\":\"swap\",\"type\":\"tuple\",\"internalType\":\"structERC721ForERC20Swap\",\"components\":[{\"name\":\"parties\",\"type\":\"tuple\",\"internalType\":\"structParties\",\"components\":[{\"name\":\"seller\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"name\":\"offer\",\"type\":\"tuple\",\"internalType\":\"structERC721TransferLib.ERC721Token\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"contractIERC721\"},{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"consideration\",\"type\":\"tuple\",\"internalType\":\"structERC20Consideration\",\"components\":[{\"name\":\"thirdParty\",\"type\":\"tuple[]\",\"internalType\":\"structDisbursement[]\",\"components\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"maxPlatformFee\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"currency\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}]}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"propose\",\"inputs\":[{\"name\":\"swap\",\"type\":\"tuple\",\"internalType\":\"structERC721ForNativeSwap\",\"components\":[{\"name\":\"parties\",\"type\":\"tuple\",\"internalType\":\"structPayableParties\",\"components\":[{\"name\":\"seller\",\"type\":\"address\",\"internalType\":\"addresspayable\"},{\"name\":\"buyer\",\"type\":\"address\",\"internalType\":\"addresspayable\"}]},{\"name\":\"offer\",\"type\":\"tuple\",\"internalType\":\"structERC721TransferLib.ERC721Token\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"contractIERC721\"},{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"consideration\",\"type\":\"tuple\",\"internalType\":\"structConsideration\",\"components\":[{\"name\":\"thirdParty\",\"type\":\"tuple[]\",\"internalType\":\"structDisbursement[]\",\"components\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"maxPlatformFee\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Proposal\",\"inputs\":[{\"name\":\"swapper\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"seller\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structERC721ForERC20Swap\",\"components\":[{\"name\":\"parties\",\"type\":\"tuple\",\"internalType\":\"structParties\",\"components\":[{\"name\":\"seller\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"name\":\"offer\",\"type\":\"tuple\",\"internalType\":\"structERC721TransferLib.ERC721Token\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"contractIERC721\"},{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"consideration\",\"type\":\"tuple\",\"internalType\":\"structERC20Consideration\",\"components\":[{\"name\":\"thirdParty\",\"type\":\"tuple[]\",\"internalType\":\"structDisbursement[]\",\"components\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"maxPlatformFee\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"currency\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}]}]},{\"name\":\"salt\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Proposal\",\"inputs\":[{\"name\":\"swapper\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"seller\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structERC721ForNativeSwap\",\"components\":[{\"name\":\"parties\",\"type\":\"tuple\",\"internalType\":\"structPayableParties\",\"components\":[{\"name\":\"seller\",\"type\":\"address\",\"internalType\":\"addresspayable\"},{\"name\":\"buyer\",\"type\":\"address\",\"internalType\":\"addresspayable\"}]},{\"name\":\"offer\",\"type\":\"tuple\",\"internalType\":\"structERC721TransferLib.ERC721Token\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"contractIERC721\"},{\"name\":\"id\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"consideration\",\"type\":\"tuple\",\"internalType\":\"structConsideration\",\"components\":[{\"name\":\"thirdParty\",\"type\":\"tuple[]\",\"internalType\":\"structDisbursement[]\",\"components\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"maxPlatformFee\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]},{\"name\":\"salt\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Proposal\",\"inputs\":[{\"name\":\"swapper\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"seller\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structMultiERC721ForERC20Swap\",\"components\":[{\"name\":\"parties\",\"type\":\"tuple\",\"internalType\":\"structParties\",\"components\":[{\"name\":\"seller\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\",\"internalType\":\"address\"}]},{\"name\":\"offer\",\"type\":\"tuple[]\",\"internalType\":\"structERC721TransferLib.MultiERC721Token[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"contractIERC721\"},{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}]},{\"name\":\"consideration\",\"type\":\"tuple\",\"internalType\":\"structERC20Consideration\",\"components\":[{\"name\":\"thirdParty\",\"type\":\"tuple[]\",\"internalType\":\"structDisbursement[]\",\"components\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"maxPlatformFee\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"currency\",\"type\":\"address\",\"internalType\":\"contractIERC20\"}]}]},{\"name\":\"salt\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"Proposal\",\"inputs\":[{\"name\":\"swapper\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"seller\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"buyer\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"tuple\",\"indexed\":false,\"internalType\":\"structMultiERC721ForNativeSwap\",\"components\":[{\"name\":\"parties\",\"type\":\"tuple\",\"internalType\":\"structPayableParties\",\"components\":[{\"name\":\"seller\",\"type\":\"address\",\"internalType\":\"addresspayable\"},{\"name\":\"buyer\",\"type\":\"address\",\"internalType\":\"addresspayable\"}]},{\"name\":\"offer\",\"type\":\"tuple[]\",\"internalType\":\"structERC721TransferLib.MultiERC721Token[]\",\"components\":[{\"name\":\"addr\",\"type\":\"address\",\"internalType\":\"contractIERC721\"},{\"name\":\"ids\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}]},{\"name\":\"consideration\",\"type\":\"tuple\",\"internalType\":\"structConsideration\",\"components\":[{\"name\":\"thirdParty\",\"type\":\"tuple[]\",\"internalType\":\"structDisbursement[]\",\"components\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]},{\"name\":\"maxPlatformFee\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"total\",\"type\":\"uint256\",\"internalType\":\"uint256\"}]}]},{\"name\":\"salt\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"}],\"anonymous\":false}]",
	Bin: "0x60a0604052348015600e575f80fd5b50604051613569380380613569833981016040819052602b91603b565b6001600160a01b03166080526066565b5f60208284031215604a575f80fd5b81516001600160a01b0381168114605f575f80fd5b9392505050565b6080516134e56100845f395f818160cb015261035e01526134e55ff3fe608060405234801561000f575f80fd5b5060043610610054575f3560e01c806216ab7a146100585780633151a3fd1461008d5780638321fe3b146100a0578063aa0753b3146100b3578063d5f39488146100c6575b5f80fd5b61006b610066366004610555565b610105565b604080519283526001600160a01b039091166020830152015b60405180910390f35b61006b61009b366004610555565b6101a8565b61006b6100ae366004610597565b610239565b61006b6100c1366004610597565b6102ca565b6100ed7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610084565b5f80806101136001436105c9565b4090505f61012a85836101258861035b565b610384565b905061013c60408601602087016105ff565b6001600160a01b031661015260208701876105ff565b6001600160a01b0316826001600160a01b03167f71c69d414815efaf9b5b0dc680b5c27172c1c2a0972b7a50b2a267f42336f93788866040516101969291906108a1565b60405180910390a49094909350915050565b5f80806101b66001436105c9565b4090505f6101cd85836101c88861035b565b6103a0565b90506101df60408601602087016105ff565b6001600160a01b03166101f560208701876105ff565b6001600160a01b0316826001600160a01b03167fcb72687c9ffe069fc6431341f72a8f74eb873c9416d5a65497c5e3f20961b7858886604051610196929190610981565b5f80806102476001436105c9565b4090505f61025e85836102598861035b565b6103ad565b905061027060408601602087016105ff565b6001600160a01b031661028660208701876105ff565b6001600160a01b0316826001600160a01b03167f1b249acab493a7b17e77aef555b48610427159610b017e6da32aad3e8ff3d9e488866040516101969291906109f0565b5f80806102d86001436105c9565b4090505f6102ef85836102ea8861035b565b6103ba565b905061030160408601602087016105ff565b6001600160a01b031661031760208701876105ff565b6001600160a01b0316826001600160a01b03167fd404029693e5bdc31a0233e163646b76d906ede2e8ddc3a2253b86d280e1620c8886604051610196929190610a3e565b5f7f00000000000000000000000000000000000000000000000000000000000000005b92915050565b5f610398610391856103c7565b8484610430565b949350505050565b5f61039861039185610443565b5f61039861039185610478565b5f610398610391856104ad565b6060604051806020016103d99061050b565b601f1982820381018352601f9091011660408190526103fc908490602001610a50565b60408051601f198184030181529082905261041a9291602001610a79565b6040516020818303038152906040529050919050565b5f610398838580519060200120846104e2565b60606040518060200161045590610518565b601f1982820381018352601f9091011660408190526103fc908490602001610a8d565b60606040518060200161048a90610525565b601f1982820381018352601f9091011660408190526103fc908490602001610a9f565b6060604051806020016104bf90610532565b601f1982820381018352601f9091011660408190526103fc908490602001610ab1565b5f604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b610b4780610ac483390190565b610c448061160b83390190565b610a068061224f83390190565b61088480612c5583390190565b5f6080828403121561054f575f80fd5b50919050565b5f60208284031215610565575f80fd5b813567ffffffffffffffff81111561057b575f80fd5b6103988482850161053f565b5f60a0828403121561054f575f80fd5b5f602082840312156105a7575f80fd5b813567ffffffffffffffff8111156105bd575f80fd5b61039884828501610587565b8181038181111561037e57634e487b7160e01b5f52601160045260245ffd5b6001600160a01b03811681146105fc575f80fd5b50565b5f6020828403121561060f575f80fd5b813561061a816105e8565b9392505050565b803561062c816105e8565b6001600160a01b039081168352602082013590610648826105e8565b808216602085015250505050565b5f808335601e1984360301811261066b575f80fd5b830160208101925035905067ffffffffffffffff81111561068a575f80fd5b8060051b360382131561069b575f80fd5b9250929050565b8183526020808401935f91600585811b8301820185855b8881101561074a57858303601f19018a52813536899003603e190181126106de575f80fd5b8801604081356106ed816105e8565b6001600160a01b0316855261070482880183610656565b8689018390529186018290529091506060906001600160fb1b03831115610729575f80fd5b91861b91828187840137509a86019a930190920191908401906001016106b9565b509098975050505050505050565b5f8235605e1983360301811261076c575f80fd5b90910192915050565b5f808335601e1984360301811261078a575f80fd5b830160208101925035905067ffffffffffffffff8111156107a9575f80fd5b8060061b360382131561069b575f80fd5b8183525f60208085019450825f5b858110156108005781356107db816105e8565b6001600160a01b031687528183013583880152604096870196909101906001016107c8565b509495945050505050565b5f6108168283610775565b606085526108286060860182846107ba565b91505060208301356020850152604083013560408501528091505092915050565b6108538282610621565b5f6108616040830183610656565b608060408601526108766080860182846106a2565b9150506108866060840184610758565b8482036060860152610898828261080b565b95945050505050565b604081525f6108b36040830185610849565b90508260208301529392505050565b5f8235607e1983360301811261076c575f80fd5b5f6108e18283610775565b608085526108f36080860182846107ba565b91505060208301356020850152604083013560408501526060830135610918816105e8565b6001600160a01b0316606094909401939093525090919050565b61093c8282610621565b5f61094a6040830183610656565b6080604086015261095f6080860182846106a2565b91505061096f60608401846108c2565b848203606086015261089882826108d6565b604081525f6108b36040830185610932565b803561099e816105e8565b6001600160a01b03168252602090810135910152565b6109be8282610621565b6109ce6040830160408301610993565b5f6109dc60808301836108c2565b60a0608085015261039860a08501826108d6565b604081525f6108b360408301856109b4565b610a0c8282610621565b610a1c6040830160408301610993565b5f610a2a6080830183610758565b60a0608085015261039860a085018261080b565b604081525f6108b36040830185610a02565b602081525f61061a6020830184610849565b5f81518060208401855e5f93019283525090919050565b5f610398610a878386610a62565b84610a62565b602081525f61061a6020830184610932565b602081525f61061a60208301846109b4565b602081525f61061a6020830184610a0256fe6080604052604051610b47380380610b4783398101604081905261002291610992565b805f336001600160a01b0316639a7d04426040518163ffffffff1660e01b8152600401602060405180830381865afa158015610060573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100849190610a5f565b9050805f61009f825f80516020610b278339815191526101e9565b15610169575060208301518351625f5ffd60e81b916100d8916100d390604080518082019091525f80825260208201525090565b610200565b5f806100e3856102a6565b915091505f6101078760400151604001518361ffff166127106102e960201b60201c565b905086604001516020015181111561014f5780876040015160200151604051622e608f60e31b8152600401610146929190918252602082015260400190565b60405180910390fd5b865160408801516101619185846103a9565b5050506101d3565b610180825f80516020610b078339815191526101e9565b156101ae5750825162585ffd60e81b906101a99061019d85610470565b604087015191906104a4565b6101d3565b604051638c91850f60e01b81526001600160e01b031983166004820152602401610146565b47156101e1576101e1610a76565b805f5260035ff35b6001600160e01b0319828116908216145b92915050565b5f61026282805160208201516040516001600160a01b039283166024820152911660448201525f606482015260609060840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b17905292915050565b90505f5b83518110156102a05761029884828151811061028457610284610a8a565b6020026020010151836104b960201b60201c565b600101610266565b50505050565b5f806102bf835f80516020610b278339815191526101e9565b6102cb576102cb610a76565b5050604081901c6001600160a01b03169160309190911c61ffff1690565b5f838302815f1985870982811083820303915050805f0361031d5783828161031357610313610a9e565b04925050506103a2565b80841161033d5760405163227bc15360e01b815260040160405180910390fd5b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b83604001514710156103dd57604080850151905163cf47918160e01b81524760048201526024810191909152604401610146565b6103f06001600160a01b0383168261057a565b83515f5b81518110156104535761044b82828151811061041257610412610a8a565b60200260200101516020015183838151811061043057610430610a8a565b6020908102919091010151516001600160a01b03169061057a565b6001016103f4565b508351610469906001600160a01b03164761057a565b5050505050565b5f610488825f80516020610b078339815191526101e9565b61049457610494610a76565b5060401c6001600160a01b031690565b60208201516104b490478361060d565b505050565b8151602080840151805190918281019160648601915f916104d991610ac6565b6104e39084610add565b90505b8083101561057157602083835e5f856001600160a01b03168760405161050c9190610af0565b5f604051808303815f865af19150503d805f8114610545576040519150601f19603f3d011682016040523d82523d5f602084013e61054a565b606091505b505090508061055e576040513d5f823e3d81fd5b5061056a602084610add565b92506104e6565b50505050505050565b8047101561059d5760405163cd78605960e01b8152306004820152602401610146565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f81146105e6576040519150601f19603f3d011682016040523d82523d5f602084013e6105eb565b606091505b50509050806104b457604051630a12f52160e11b815260040160405180910390fd5b5f836001600160a01b031683617530906040515f60405180830381858888f193505050503d805f811461065b576040519150601f19603f3d011682016040523d82523d5f602084013e610660565b606091505b5050905080156106705750505050565b60405163f340fa0160e01b81526001600160a01b03858116600483015283169063f340fa019085906024015f604051808303818588803b1580156106b2575f80fd5b505af11580156106c4573d5f803e3d5ffd5b505050505050505050565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b0381118282101715610705576107056106cf565b60405290565b604051606081016001600160401b0381118282101715610705576107056106cf565b604051601f8201601f191681016001600160401b0381118282101715610755576107556106cf565b604052919050565b6001600160a01b0381168114610771575f80fd5b50565b5f6001600160401b0382111561078c5761078c6106cf565b5060051b60200190565b5f82601f8301126107a5575f80fd5b815160206107ba6107b583610774565b61072d565b828152600592831b85018201928282019190878511156107d8575f80fd5b8387015b858110156108ad5780516001600160401b03808211156107fa575f80fd5b908901906040828c03601f1901811315610812575f80fd5b61081a6106e3565b888401516108278161075d565b81528382015183811115610839575f80fd5b8085019450508c603f85011261084d575f80fd5b88840151925061085f6107b584610774565b83815292861b8401820192898101908e85111561087a575f80fd5b948301945b848610156108985785518252948a0194908a019061087f565b828b01525087525050509284019284016107dc565b5090979650505050505050565b5f606082840312156108ca575f80fd5b6108d261070b565b82519091506001600160401b038111156108ea575f80fd5b8201601f810184136108fa575f80fd5b8051602061090a6107b583610774565b82815260069290921b83018101918181019087841115610928575f80fd5b938201935b838510156109725760408589031215610944575f80fd5b61094c6106e3565b85516109578161075d565b8152858401518482015282526040909401939082019061092d565b808652505080850151818501525050506040820151604082015292915050565b5f602082840312156109a2575f80fd5b81516001600160401b03808211156109b8575f80fd5b9083019081850360808112156109cc575f80fd5b6109d461070b565b60408212156109e1575f80fd5b6109e96106e3565b915083516109f68161075d565b82526020840151610a068161075d565b602083015290815260408301519082821115610a20575f80fd5b610a2c87838601610796565b60208201526060840151915082821115610a44575f80fd5b610a50878386016108ba565b60408201529695505050505050565b5f60208284031215610a6f575f80fd5b5051919050565b634e487b7160e01b5f52600160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b80820281158282048414176101fa576101fa610ab2565b808201808211156101fa576101fa610ab2565b5f82518060208501845e5f92019182525091905056fea323ce5da2da0ba8547fdf3b766db1a951382101b4bc34c557dc16614e7c251d050d42634aae4c3c6849674d6854e25cea16f058fff2e56201c5f16d34ee4aa1608060405234801561000f575f80fd5b50604051610c44380380610c4483398101604081905261002e91610a5d565b805f336001600160a01b0316639a7d04426040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100909190610b2a565b9050805f6100ab825f80516020610c248339815191526101df565b15610175575060208301518351625f5ffd60e81b916100e4916100df90604080518082019091525f80825260208201525090565b6101f6565b5f806100ef8561029c565b915091505f6101138760400151604001518361ffff166127106102df60201b60201c565b905086604001516020015181111561015b5780876040015160200151604051622e608f60e31b8152600401610152929190918252602082015260400190565b60405180910390fd5b8651604088015161016d91858461039f565b5050506101d7565b61018c825f80516020610c048339815191526101df565b156101b25750825162585ffd60e81b906101ad906101a98561049e565b5050565b6101d7565b604051638c91850f60e01b81526001600160e01b031983166004820152602401610152565b805f5260035ff35b6001600160e01b0319828116908216145b92915050565b5f61025882805160208201516040516001600160a01b039283166024820152911660448201525f606482015260609060840160408051601f198184030181529190526020810180516001600160e01b03166323b872dd60e01b17905292915050565b90505f5b83518110156102965761028e84828151811061027a5761027a610b55565b6020026020010151836104d760201b60201c565b60010161025c565b50505050565b5f806102b5835f80516020610c248339815191526101df565b6102c1576102c1610b41565b5050604081901c6001600160a01b03169160309190911c61ffff1690565b5f838302815f1985870982811083820303915050805f036103135783828161030957610309610b69565b0492505050610398565b8084116103335760405163227bc15360e01b815260040160405180910390fd5b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b6040840151602084015160608601516103c5916001600160a01b03909116908585610598565b6103cf8282610b91565b85519091505f5b81518110156104735761044086602001518383815181106103f9576103f9610b55565b60200260200101515f015184848151811061041657610416610b55565b6020026020010151602001518a606001516001600160a01b031661059860201b909392919060201c565b81818151811061045257610452610b55565b602002602001015160200151836104699190610b91565b92506001016103d6565b50602085015185516060880151610496926001600160a01b039091169185610598565b505050505050565b5f6104b6825f80516020610c048339815191526101df565b6104c2576104c2610b41565b5060401c6001600160a01b031690565b505050565b8151602080840151805190918281019160648601915f916104f791610ba4565b6105019084610bbb565b90505b8083101561058f57602083835e5f856001600160a01b03168760405161052a9190610bce565b5f604051808303815f865af19150503d805f8114610563576040519150601f19603f3d011682016040523d82523d5f602084013e610568565b606091505b505090508061057c576040513d5f823e3d81fd5b50610588602084610bbb565b9250610504565b50505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b039081166323b872dd60e01b179091526102969186916105f616565b5f61060a6001600160a01b03841683610657565b905080515f1415801561062e57508080602001905181019061062c9190610be4565b155b156104d257604051635274afe760e01b81526001600160a01b0384166004820152602401610152565b606061039883835f845f80856001600160a01b0316848660405161067b9190610bce565b5f6040518083038185875af1925050503d805f81146106b5576040519150601f19603f3d011682016040523d82523d5f602084013e6106ba565b606091505b5090925090506106cb8683836106d5565b9695505050505050565b6060826106ea576106e582610731565b610398565b815115801561070157506001600160a01b0384163b155b1561072a57604051639996b31560e01b81526001600160a01b0385166004820152602401610152565b5080610398565b8051156107415780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b634e487b7160e01b5f52604160045260245ffd5b604080519081016001600160401b03811182821017156107935761079361075d565b60405290565b604051608081016001600160401b03811182821017156107935761079361075d565b604051606081016001600160401b03811182821017156107935761079361075d565b604051601f8201601f191681016001600160401b03811182821017156108055761080561075d565b604052919050565b6001600160a01b038116811461075a575f80fd5b5f6001600160401b038211156108395761083961075d565b5060051b60200190565b5f82601f830112610852575f80fd5b8151602061086761086283610821565b6107dd565b828152600592831b8501820192828201919087851115610885575f80fd5b8387015b8581101561095a5780516001600160401b03808211156108a7575f80fd5b908901906040828c03601f19018113156108bf575f80fd5b6108c7610771565b888401516108d48161080d565b815283820151838111156108e6575f80fd5b8085019450508c603f8501126108fa575f80fd5b88840151925061090c61086284610821565b83815292861b8401820192898101908e851115610927575f80fd5b948301945b848610156109455785518252948a0194908a019061092c565b828b0152508752505050928401928401610889565b5090979650505050505050565b80516109728161080d565b919050565b5f60808284031215610987575f80fd5b61098f610799565b82519091506001600160401b038111156109a7575f80fd5b8201601f810184136109b7575f80fd5b805160206109c761086283610821565b82815260069290921b830181019181810190878411156109e5575f80fd5b938201935b83851015610a2f5760408589031215610a01575f80fd5b610a09610771565b8551610a148161080d565b815285840151848201528252604090940193908201906109ea565b8552508481015190840152505060408083015190820152610a5260608301610967565b606082015292915050565b5f60208284031215610a6d575f80fd5b81516001600160401b0380821115610a83575f80fd5b908301908185036080811215610a97575f80fd5b610a9f6107bb565b6040821215610aac575f80fd5b610ab4610771565b91508351610ac18161080d565b82526020840151610ad18161080d565b602083015290815260408301519082821115610aeb575f80fd5b610af787838601610843565b60208201526060840151915082821115610b0f575f80fd5b610b1b87838601610977565b60408201529695505050505050565b5f60208284031215610b3a575f80fd5b5051919050565b634e487b7160e01b5f52600160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b818103818111156101f0576101f0610b7d565b80820281158282048414176101f0576101f0610b7d565b808201808211156101f0576101f0610b7d565b5f82518060208501845e5f920191825250919050565b5f60208284031215610bf4575f80fd5b81518015158114610398575f80fdfea323ce5da2da0ba8547fdf3b766db1a951382101b4bc34c557dc16614e7c251d050d42634aae4c3c6849674d6854e25cea16f058fff2e56201c5f16d34ee4aa1608060405234801561000f575f80fd5b50604051610a06380380610a0683398101604081905261002e9161083a565b805f336001600160a01b0316639a7d04426040518163ffffffff1660e01b8152600401602060405180830381865afa15801561006c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610090919061091e565b9050805f6100ab825f805160206109e68339815191526101df565b15610175575060208301518351625f5ffd60e81b916100e4916100df90604080518082019091525f80825260208201525090565b6101f6565b5f806100ef8561026b565b915091505f6101138760400151604001518361ffff166127106102ae60201b60201c565b905086604001516020015181111561015b5780876040015160200151604051622e608f60e31b8152600401610152929190918252602082015260400190565b60405180910390fd5b8651604088015161016d91858461036e565b5050506101d7565b61018c825f805160206109c68339815191526101df565b156101b25750825162585ffd60e81b906101ad906101a985610465565b5050565b6101d7565b604051638c91850f60e01b81526001600160e01b031983166004820152602401610152565b805f5260035ff35b6001600160e01b0319828116908216145b92915050565b81518151602080840151908501516040516323b872dd60e01b81526001600160a01b039384166004820152918316602483015260448201529116906323b872dd906064015f604051808303815f87803b158015610251575f80fd5b505af1158015610263573d5f803e3d5ffd5b505050505050565b5f80610284835f805160206109e68339815191526101df565b61029057610290610935565b5050604081901c6001600160a01b03169160309190911c61ffff1690565b5f838302815f1985870982811083820303915050805f036102e2578382816102d8576102d8610949565b0492505050610367565b8084116103025760405163227bc15360e01b815260040160405180910390fd5b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b604084015160208401516060860151610394916001600160a01b0390911690858561049e565b61039e828261095d565b85519091505f5b81518110156104425761040f86602001518383815181106103c8576103c861097c565b60200260200101515f01518484815181106103e5576103e561097c565b6020026020010151602001518a606001516001600160a01b031661049e60201b909392919060201c565b8181815181106104215761042161097c565b60200260200101516020015183610438919061095d565b92506001016103a5565b50602085015185516060880151610263926001600160a01b03909116918561049e565b5f61047d825f805160206109c68339815191526101df565b61048957610489610935565b5060401c6001600160a01b031690565b505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b039081166323b872dd60e01b179091526104fc91869161050216565b50505050565b5f6105166001600160a01b03841683610563565b905080515f1415801561053a5750808060200190518101906105389190610990565b155b1561049957604051635274afe760e01b81526001600160a01b0384166004820152602401610152565b606061036783835f845f80856001600160a01b0316848660405161058791906109af565b5f6040518083038185875af1925050503d805f81146105c1576040519150601f19603f3d011682016040523d82523d5f602084013e6105c6565b606091505b5090925090506105d78683836105e1565b9695505050505050565b6060826105f6576105f18261063d565b610367565b815115801561060d57506001600160a01b0384163b155b1561063657604051639996b31560e01b81526001600160a01b0385166004820152602401610152565b5080610367565b80511561064d5780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b50565b634e487b7160e01b5f52604160045260245ffd5b604051608081016001600160401b038111828210171561069f5761069f610669565b60405290565b604080519081016001600160401b038111828210171561069f5761069f610669565b604051606081016001600160401b038111828210171561069f5761069f610669565b604051601f8201601f191681016001600160401b038111828210171561071157610711610669565b604052919050565b6001600160a01b0381168114610666575f80fd5b805161073881610719565b919050565b5f6080828403121561074d575f80fd5b61075561067d565b82519091506001600160401b038082111561076e575f80fd5b818401915084601f830112610781575f80fd5b815160208282111561079557610795610669565b6107a3818360051b016106e9565b828152818101935060069290921b8401810191878311156107c2575f80fd5b938101935b8285101561080c57604085890312156107de575f80fd5b6107e66106a5565b85516107f181610719565b815285830151838201528452604090940193928101926107c7565b855285810151908501525050506040808301519082015261082f6060830161072d565b606082015292915050565b5f6020828403121561084a575f80fd5b81516001600160401b0380821115610860575f80fd5b9083019081850360a0811215610874575f80fd5b61087c6106c7565b6040821215610889575f80fd5b6108916106a5565b845161089c81610719565b815260208501516108ac81610719565b602082015281526040603f19830112156108c4575f80fd5b6108cc6106a5565b915060408401516108dc81610719565b80835250606084015160208301528160208201526080840151915082821115610903575f80fd5b61090f8783860161073d565b60408201529695505050505050565b5f6020828403121561092e575f80fd5b5051919050565b634e487b7160e01b5f52600160045260245ffd5b634e487b7160e01b5f52601260045260245ffd5b818103818111156101f057634e487b7160e01b5f52601160045260245ffd5b634e487b7160e01b5f52603260045260245ffd5b5f602082840312156109a0575f80fd5b81518015158114610367575f80fd5b5f82518060208501845e5f92019182525091905056fea323ce5da2da0ba8547fdf3b766db1a951382101b4bc34c557dc16614e7c251d050d42634aae4c3c6849674d6854e25cea16f058fff2e56201c5f16d34ee4aa160806040526040516108843803806108848339810160408190526100229161074c565b805f336001600160a01b0316639a7d04426040518163ffffffff1660e01b8152600401602060405180830381865afa158015610060573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100849190610830565b9050805f6001600160e01b0319821663050d426360e01b03610165575060208301518351625f5ffd60e81b916100d4916100cf90604080518082019091525f80825260208201525090565b6101e1565b5f806100df85610256565b915091505f6101038760400151604001518361ffff1661271061029660201b60201c565b905086604001516020015181111561014b5780876040015160200151604051622e608f60e31b8152600401610142929190918252602082015260400190565b60405180910390fd5b8651604088015161015d918584610356565b5050506101cb565b6001600160e01b0319821663a323ce5d60e01b036101a65750825162585ffd60e81b906101a1906101958561041d565b6040870151919061044e565b6101cb565b604051638c91850f60e01b81526001600160e01b031983166004820152602401610142565b47156101d9576101d9610847565b805f5260035ff35b81518151602080840151908501516040516323b872dd60e01b81526001600160a01b039384166004820152918316602483015260448201529116906323b872dd906064015f604051808303815f87803b15801561023c575f80fd5b505af115801561024e573d5f803e3d5ffd5b505050505050565b5f8063050d426360e01b6001600160e01b031984161461027857610278610847565b5050604081901c6001600160a01b03169160309190911c61ffff1690565b5f838302815f1985870982811083820303915050805f036102ca578382816102c0576102c061085b565b049250505061034f565b8084116102ea5760405163227bc15360e01b815260040160405180910390fd5b5f848688095f868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150505b9392505050565b836040015147101561038a57604080850151905163cf47918160e01b81524760048201526024810191909152604401610142565b61039d6001600160a01b03831682610463565b83515f5b8151811015610400576103f88282815181106103bf576103bf61086f565b6020026020010151602001518383815181106103dd576103dd61086f565b6020908102919091010151516001600160a01b031690610463565b6001016103a1565b508351610416906001600160a01b031647610463565b5050505050565b5f63a323ce5d60e01b6001600160e01b031983161461043e5761043e610847565b5060401c6001600160a01b031690565b602082015161045e9047836104f6565b505050565b804710156104865760405163cd78605960e01b8152306004820152602401610142565b5f826001600160a01b0316826040515f6040518083038185875af1925050503d805f81146104cf576040519150601f19603f3d011682016040523d82523d5f602084013e6104d4565b606091505b505090508061045e57604051630a12f52160e11b815260040160405180910390fd5b5f836001600160a01b031683617530906040515f60405180830381858888f193505050503d805f8114610544576040519150601f19603f3d011682016040523d82523d5f602084013e610549565b606091505b5050905080156105595750505050565b60405163f340fa0160e01b81526001600160a01b03858116600483015283169063f340fa019085906024015f604051808303818588803b15801561059b575f80fd5b505af11580156105ad573d5f803e3d5ffd5b505050505050505050565b634e487b7160e01b5f52604160045260245ffd5b604051606081016001600160401b03811182821017156105ee576105ee6105b8565b60405290565b604080519081016001600160401b03811182821017156105ee576105ee6105b8565b604051601f8201601f191681016001600160401b038111828210171561063e5761063e6105b8565b604052919050565b6001600160a01b038116811461065a575f80fd5b50565b5f6060828403121561066d575f80fd5b6106756105cc565b82519091506001600160401b038082111561068e575f80fd5b818401915084601f8301126106a1575f80fd5b81516020828211156106b5576106b56105b8565b6106c3818360051b01610616565b828152818101935060069290921b8401810191878311156106e2575f80fd5b938101935b8285101561072c57604085890312156106fe575f80fd5b6107066105f4565b855161071181610646565b815285830151838201528452604090940193928101926106e7565b808652508086015181860152505050506040820151604082015292915050565b5f6020828403121561075c575f80fd5b81516001600160401b0380821115610772575f80fd5b9083019081850360a0811215610786575f80fd5b61078e6105cc565b604082121561079b575f80fd5b6107a36105f4565b84516107ae81610646565b815260208501516107be81610646565b602082015281526040603f19830112156107d6575f80fd5b6107de6105f4565b915060408401516107ee81610646565b80835250606084015160208301528160208201526080840151915082821115610815575f80fd5b6108218783860161065d565b60408201529695505050505050565b5f60208284031215610840575f80fd5b5051919050565b634e487b7160e01b5f52600160045260245ffd5b634e487b7160e01b5f52601260045260245ffd5b634e487b7160e01b5f52603260045260245ffdfea164736f6c6343000819000a",
}

// Nopush0ABI is the input ABI used to generate the binding from.
// Deprecated: Use Nopush0MetaData.ABI instead.
var Nopush0ABI = Nopush0MetaData.ABI

// Nopush0Bin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Nopush0MetaData.Bin instead.
var Nopush0Bin = Nopush0MetaData.Bin

// DeployNopush0 deploys a new Ethereum contract, binding an instance of Nopush0 to it.
func DeployNopush0(auth *bind.TransactOpts, backend bind.ContractBackend, deployer_ common.Address) (common.Address, *types.Transaction, *Nopush0, error) {
	parsed, err := Nopush0MetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Nopush0Bin), backend, deployer_)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Nopush0{Nopush0Caller: Nopush0Caller{contract: contract}, Nopush0Transactor: Nopush0Transactor{contract: contract}, Nopush0Filterer: Nopush0Filterer{contract: contract}}, nil
}

// Nopush0 is an auto generated Go binding around an Ethereum contract.
type Nopush0 struct {
	Nopush0Caller     // Read-only binding to the contract
	Nopush0Transactor // Write-only binding to the contract
	Nopush0Filterer   // Log filterer for contract events
}

// Nopush0Caller is an auto generated read-only Go binding around an Ethereum contract.
type Nopush0Caller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Nopush0Transactor is an auto generated write-only Go binding around an Ethereum contract.
type Nopush0Transactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Nopush0Filterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Nopush0Filterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Nopush0Session is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Nopush0Session struct {
	Contract     *Nopush0          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Nopush0CallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Nopush0CallerSession struct {
	Contract *Nopush0Caller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// Nopush0TransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Nopush0TransactorSession struct {
	Contract     *Nopush0Transactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// Nopush0Raw is an auto generated low-level Go binding around an Ethereum contract.
type Nopush0Raw struct {
	Contract *Nopush0 // Generic contract binding to access the raw methods on
}

// Nopush0CallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Nopush0CallerRaw struct {
	Contract *Nopush0Caller // Generic read-only contract binding to access the raw methods on
}

// Nopush0TransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Nopush0TransactorRaw struct {
	Contract *Nopush0Transactor // Generic write-only contract binding to access the raw methods on
}

// NewNopush0 creates a new instance of Nopush0, bound to a specific deployed contract.
func NewNopush0(address common.Address, backend bind.ContractBackend) (*Nopush0, error) {
	contract, err := bindNopush0(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Nopush0{Nopush0Caller: Nopush0Caller{contract: contract}, Nopush0Transactor: Nopush0Transactor{contract: contract}, Nopush0Filterer: Nopush0Filterer{contract: contract}}, nil
}

// NewNopush0Caller creates a new read-only instance of Nopush0, bound to a specific deployed contract.
func NewNopush0Caller(address common.Address, caller bind.ContractCaller) (*Nopush0Caller, error) {
	contract, err := bindNopush0(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Nopush0Caller{contract: contract}, nil
}

// NewNopush0Transactor creates a new write-only instance of Nopush0, bound to a specific deployed contract.
func NewNopush0Transactor(address common.Address, transactor bind.ContractTransactor) (*Nopush0Transactor, error) {
	contract, err := bindNopush0(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Nopush0Transactor{contract: contract}, nil
}

// NewNopush0Filterer creates a new log filterer instance of Nopush0, bound to a specific deployed contract.
func NewNopush0Filterer(address common.Address, filterer bind.ContractFilterer) (*Nopush0Filterer, error) {
	contract, err := bindNopush0(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Nopush0Filterer{contract: contract}, nil
}

// bindNopush0 binds a generic wrapper to an already deployed contract.
func bindNopush0(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(Nopush0ABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Nopush0 *Nopush0Raw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Nopush0.Contract.Nopush0Caller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Nopush0 *Nopush0Raw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nopush0.Contract.Nopush0Transactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Nopush0 *Nopush0Raw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Nopush0.Contract.Nopush0Transactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Nopush0 *Nopush0CallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Nopush0.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Nopush0 *Nopush0TransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Nopush0.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Nopush0 *Nopush0TransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Nopush0.Contract.contract.Transact(opts, method, params...)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Nopush0 *Nopush0Caller) Deployer(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Nopush0.contract.Call(opts, &out, "deployer")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Nopush0 *Nopush0Session) Deployer() (common.Address, error) {
	return _Nopush0.Contract.Deployer(&_Nopush0.CallOpts)
}

// Deployer is a free data retrieval call binding the contract method 0xd5f39488.
//
// Solidity: function deployer() view returns(address)
func (_Nopush0 *Nopush0CallerSession) Deployer() (common.Address, error) {
	return _Nopush0.Contract.Deployer(&_Nopush0.CallOpts)
}

// Propose is a paid mutator transaction binding the contract method 0x0016ab7a.
//
// Solidity: function propose(((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0Transactor) Propose(opts *bind.TransactOpts, swap MultiERC721ForNativeSwap) (*types.Transaction, error) {
	return _Nopush0.contract.Transact(opts, "propose", swap)
}

// Propose is a paid mutator transaction binding the contract method 0x0016ab7a.
//
// Solidity: function propose(((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0Session) Propose(swap MultiERC721ForNativeSwap) (*types.Transaction, error) {
	return _Nopush0.Contract.Propose(&_Nopush0.TransactOpts, swap)
}

// Propose is a paid mutator transaction binding the contract method 0x0016ab7a.
//
// Solidity: function propose(((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0TransactorSession) Propose(swap MultiERC721ForNativeSwap) (*types.Transaction, error) {
	return _Nopush0.Contract.Propose(&_Nopush0.TransactOpts, swap)
}

// Propose0 is a paid mutator transaction binding the contract method 0x3151a3fd.
//
// Solidity: function propose(((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256,address)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0Transactor) Propose0(opts *bind.TransactOpts, swap MultiERC721ForERC20Swap) (*types.Transaction, error) {
	return _Nopush0.contract.Transact(opts, "propose0", swap)
}

// Propose0 is a paid mutator transaction binding the contract method 0x3151a3fd.
//
// Solidity: function propose(((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256,address)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0Session) Propose0(swap MultiERC721ForERC20Swap) (*types.Transaction, error) {
	return _Nopush0.Contract.Propose0(&_Nopush0.TransactOpts, swap)
}

// Propose0 is a paid mutator transaction binding the contract method 0x3151a3fd.
//
// Solidity: function propose(((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256,address)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0TransactorSession) Propose0(swap MultiERC721ForERC20Swap) (*types.Transaction, error) {
	return _Nopush0.Contract.Propose0(&_Nopush0.TransactOpts, swap)
}

// Propose1 is a paid mutator transaction binding the contract method 0x8321fe3b.
//
// Solidity: function propose(((address,address),(address,uint256),((address,uint256)[],uint256,uint256,address)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0Transactor) Propose1(opts *bind.TransactOpts, swap ERC721ForERC20Swap) (*types.Transaction, error) {
	return _Nopush0.contract.Transact(opts, "propose1", swap)
}

// Propose1 is a paid mutator transaction binding the contract method 0x8321fe3b.
//
// Solidity: function propose(((address,address),(address,uint256),((address,uint256)[],uint256,uint256,address)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0Session) Propose1(swap ERC721ForERC20Swap) (*types.Transaction, error) {
	return _Nopush0.Contract.Propose1(&_Nopush0.TransactOpts, swap)
}

// Propose1 is a paid mutator transaction binding the contract method 0x8321fe3b.
//
// Solidity: function propose(((address,address),(address,uint256),((address,uint256)[],uint256,uint256,address)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0TransactorSession) Propose1(swap ERC721ForERC20Swap) (*types.Transaction, error) {
	return _Nopush0.Contract.Propose1(&_Nopush0.TransactOpts, swap)
}

// Propose2 is a paid mutator transaction binding the contract method 0xaa0753b3.
//
// Solidity: function propose(((address,address),(address,uint256),((address,uint256)[],uint256,uint256)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0Transactor) Propose2(opts *bind.TransactOpts, swap ERC721ForNativeSwap) (*types.Transaction, error) {
	return _Nopush0.contract.Transact(opts, "propose2", swap)
}

// Propose2 is a paid mutator transaction binding the contract method 0xaa0753b3.
//
// Solidity: function propose(((address,address),(address,uint256),((address,uint256)[],uint256,uint256)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0Session) Propose2(swap ERC721ForNativeSwap) (*types.Transaction, error) {
	return _Nopush0.Contract.Propose2(&_Nopush0.TransactOpts, swap)
}

// Propose2 is a paid mutator transaction binding the contract method 0xaa0753b3.
//
// Solidity: function propose(((address,address),(address,uint256),((address,uint256)[],uint256,uint256)) swap) returns(bytes32, address)
func (_Nopush0 *Nopush0TransactorSession) Propose2(swap ERC721ForNativeSwap) (*types.Transaction, error) {
	return _Nopush0.Contract.Propose2(&_Nopush0.TransactOpts, swap)
}

// Nopush0ProposalIterator is returned from FilterProposal and is used to iterate over the raw logs and unpacked data for Proposal events raised by the Nopush0 contract.
type Nopush0ProposalIterator struct {
	Event *Nopush0Proposal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Nopush0ProposalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Nopush0Proposal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Nopush0Proposal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Nopush0ProposalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Nopush0ProposalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Nopush0Proposal represents a Proposal event raised by the Nopush0 contract.
type Nopush0Proposal struct {
	Swapper common.Address
	Seller  common.Address
	Buyer   common.Address
	Arg3    ERC721ForERC20Swap
	Salt    [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterProposal is a free log retrieval operation binding the contract event 0x1b249acab493a7b17e77aef555b48610427159610b017e6da32aad3e8ff3d9e4.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256),((address,uint256)[],uint256,uint256,address)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) FilterProposal(opts *bind.FilterOpts, swapper []common.Address, seller []common.Address, buyer []common.Address) (*Nopush0ProposalIterator, error) {

	var swapperRule []interface{}
	for _, swapperItem := range swapper {
		swapperRule = append(swapperRule, swapperItem)
	}
	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}
	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Nopush0.contract.FilterLogs(opts, "Proposal", swapperRule, sellerRule, buyerRule)
	if err != nil {
		return nil, err
	}
	return &Nopush0ProposalIterator{contract: _Nopush0.contract, event: "Proposal", logs: logs, sub: sub}, nil
}

// WatchProposal is a free log subscription operation binding the contract event 0x1b249acab493a7b17e77aef555b48610427159610b017e6da32aad3e8ff3d9e4.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256),((address,uint256)[],uint256,uint256,address)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) WatchProposal(opts *bind.WatchOpts, sink chan<- *Nopush0Proposal, swapper []common.Address, seller []common.Address, buyer []common.Address) (event.Subscription, error) {

	var swapperRule []interface{}
	for _, swapperItem := range swapper {
		swapperRule = append(swapperRule, swapperItem)
	}
	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}
	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Nopush0.contract.WatchLogs(opts, "Proposal", swapperRule, sellerRule, buyerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Nopush0Proposal)
				if err := _Nopush0.contract.UnpackLog(event, "Proposal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposal is a log parse operation binding the contract event 0x1b249acab493a7b17e77aef555b48610427159610b017e6da32aad3e8ff3d9e4.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256),((address,uint256)[],uint256,uint256,address)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) ParseProposal(log types.Log) (*Nopush0Proposal, error) {
	event := new(Nopush0Proposal)
	if err := _Nopush0.contract.UnpackLog(event, "Proposal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Nopush0Proposal0Iterator is returned from FilterProposal0 and is used to iterate over the raw logs and unpacked data for Proposal0 events raised by the Nopush0 contract.
type Nopush0Proposal0Iterator struct {
	Event *Nopush0Proposal0 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Nopush0Proposal0Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Nopush0Proposal0)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Nopush0Proposal0)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Nopush0Proposal0Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Nopush0Proposal0Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Nopush0Proposal0 represents a Proposal0 event raised by the Nopush0 contract.
type Nopush0Proposal0 struct {
	Swapper common.Address
	Seller  common.Address
	Buyer   common.Address
	Arg3    ERC721ForNativeSwap
	Salt    [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterProposal0 is a free log retrieval operation binding the contract event 0xd404029693e5bdc31a0233e163646b76d906ede2e8ddc3a2253b86d280e1620c.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256),((address,uint256)[],uint256,uint256)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) FilterProposal0(opts *bind.FilterOpts, swapper []common.Address, seller []common.Address, buyer []common.Address) (*Nopush0Proposal0Iterator, error) {

	var swapperRule []interface{}
	for _, swapperItem := range swapper {
		swapperRule = append(swapperRule, swapperItem)
	}
	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}
	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Nopush0.contract.FilterLogs(opts, "Proposal0", swapperRule, sellerRule, buyerRule)
	if err != nil {
		return nil, err
	}
	return &Nopush0Proposal0Iterator{contract: _Nopush0.contract, event: "Proposal0", logs: logs, sub: sub}, nil
}

// WatchProposal0 is a free log subscription operation binding the contract event 0xd404029693e5bdc31a0233e163646b76d906ede2e8ddc3a2253b86d280e1620c.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256),((address,uint256)[],uint256,uint256)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) WatchProposal0(opts *bind.WatchOpts, sink chan<- *Nopush0Proposal0, swapper []common.Address, seller []common.Address, buyer []common.Address) (event.Subscription, error) {

	var swapperRule []interface{}
	for _, swapperItem := range swapper {
		swapperRule = append(swapperRule, swapperItem)
	}
	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}
	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Nopush0.contract.WatchLogs(opts, "Proposal0", swapperRule, sellerRule, buyerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Nopush0Proposal0)
				if err := _Nopush0.contract.UnpackLog(event, "Proposal0", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposal0 is a log parse operation binding the contract event 0xd404029693e5bdc31a0233e163646b76d906ede2e8ddc3a2253b86d280e1620c.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256),((address,uint256)[],uint256,uint256)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) ParseProposal0(log types.Log) (*Nopush0Proposal0, error) {
	event := new(Nopush0Proposal0)
	if err := _Nopush0.contract.UnpackLog(event, "Proposal0", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Nopush0Proposal1Iterator is returned from FilterProposal1 and is used to iterate over the raw logs and unpacked data for Proposal1 events raised by the Nopush0 contract.
type Nopush0Proposal1Iterator struct {
	Event *Nopush0Proposal1 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Nopush0Proposal1Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Nopush0Proposal1)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Nopush0Proposal1)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Nopush0Proposal1Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Nopush0Proposal1Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Nopush0Proposal1 represents a Proposal1 event raised by the Nopush0 contract.
type Nopush0Proposal1 struct {
	Swapper common.Address
	Seller  common.Address
	Buyer   common.Address
	Arg3    MultiERC721ForERC20Swap
	Salt    [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterProposal1 is a free log retrieval operation binding the contract event 0xcb72687c9ffe069fc6431341f72a8f74eb873c9416d5a65497c5e3f20961b785.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256,address)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) FilterProposal1(opts *bind.FilterOpts, swapper []common.Address, seller []common.Address, buyer []common.Address) (*Nopush0Proposal1Iterator, error) {

	var swapperRule []interface{}
	for _, swapperItem := range swapper {
		swapperRule = append(swapperRule, swapperItem)
	}
	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}
	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Nopush0.contract.FilterLogs(opts, "Proposal1", swapperRule, sellerRule, buyerRule)
	if err != nil {
		return nil, err
	}
	return &Nopush0Proposal1Iterator{contract: _Nopush0.contract, event: "Proposal1", logs: logs, sub: sub}, nil
}

// WatchProposal1 is a free log subscription operation binding the contract event 0xcb72687c9ffe069fc6431341f72a8f74eb873c9416d5a65497c5e3f20961b785.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256,address)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) WatchProposal1(opts *bind.WatchOpts, sink chan<- *Nopush0Proposal1, swapper []common.Address, seller []common.Address, buyer []common.Address) (event.Subscription, error) {

	var swapperRule []interface{}
	for _, swapperItem := range swapper {
		swapperRule = append(swapperRule, swapperItem)
	}
	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}
	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Nopush0.contract.WatchLogs(opts, "Proposal1", swapperRule, sellerRule, buyerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Nopush0Proposal1)
				if err := _Nopush0.contract.UnpackLog(event, "Proposal1", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposal1 is a log parse operation binding the contract event 0xcb72687c9ffe069fc6431341f72a8f74eb873c9416d5a65497c5e3f20961b785.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256,address)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) ParseProposal1(log types.Log) (*Nopush0Proposal1, error) {
	event := new(Nopush0Proposal1)
	if err := _Nopush0.contract.UnpackLog(event, "Proposal1", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Nopush0Proposal2Iterator is returned from FilterProposal2 and is used to iterate over the raw logs and unpacked data for Proposal2 events raised by the Nopush0 contract.
type Nopush0Proposal2Iterator struct {
	Event *Nopush0Proposal2 // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Nopush0Proposal2Iterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Nopush0Proposal2)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Nopush0Proposal2)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Nopush0Proposal2Iterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Nopush0Proposal2Iterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Nopush0Proposal2 represents a Proposal2 event raised by the Nopush0 contract.
type Nopush0Proposal2 struct {
	Swapper common.Address
	Seller  common.Address
	Buyer   common.Address
	Arg3    MultiERC721ForNativeSwap
	Salt    [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterProposal2 is a free log retrieval operation binding the contract event 0x71c69d414815efaf9b5b0dc680b5c27172c1c2a0972b7a50b2a267f42336f937.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) FilterProposal2(opts *bind.FilterOpts, swapper []common.Address, seller []common.Address, buyer []common.Address) (*Nopush0Proposal2Iterator, error) {

	var swapperRule []interface{}
	for _, swapperItem := range swapper {
		swapperRule = append(swapperRule, swapperItem)
	}
	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}
	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Nopush0.contract.FilterLogs(opts, "Proposal2", swapperRule, sellerRule, buyerRule)
	if err != nil {
		return nil, err
	}
	return &Nopush0Proposal2Iterator{contract: _Nopush0.contract, event: "Proposal2", logs: logs, sub: sub}, nil
}

// WatchProposal2 is a free log subscription operation binding the contract event 0x71c69d414815efaf9b5b0dc680b5c27172c1c2a0972b7a50b2a267f42336f937.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) WatchProposal2(opts *bind.WatchOpts, sink chan<- *Nopush0Proposal2, swapper []common.Address, seller []common.Address, buyer []common.Address) (event.Subscription, error) {

	var swapperRule []interface{}
	for _, swapperItem := range swapper {
		swapperRule = append(swapperRule, swapperItem)
	}
	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}
	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _Nopush0.contract.WatchLogs(opts, "Proposal2", swapperRule, sellerRule, buyerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Nopush0Proposal2)
				if err := _Nopush0.contract.UnpackLog(event, "Proposal2", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseProposal2 is a log parse operation binding the contract event 0x71c69d414815efaf9b5b0dc680b5c27172c1c2a0972b7a50b2a267f42336f937.
//
// Solidity: event Proposal(address indexed swapper, address indexed seller, address indexed buyer, ((address,address),(address,uint256[])[],((address,uint256)[],uint256,uint256)) arg3, bytes32 salt)
func (_Nopush0 *Nopush0Filterer) ParseProposal2(log types.Log) (*Nopush0Proposal2, error) {
	event := new(Nopush0Proposal2)
	if err := _Nopush0.contract.UnpackLog(event, "Proposal2", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

